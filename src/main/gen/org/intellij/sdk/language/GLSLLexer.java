/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2020 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.GLSLTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>GLSL.flex</tt>
 */
class GLSLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int WAITING_NAME = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 3488 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<6)|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\10\2\1\3\4\2\1\4\1\5\1\6\4\2\1\7\6\2\1\10\1\11\361\2");

  /* The ZZ_CMAP_Y table has 640 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\27\2\1\3\1\2\1\4\3\2\1\5\5\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6"+
    "\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\7\1\2\1\7\1\3\4\2\1\5\1\7\34"+
    "\2\1\3\1\7\4\2\1\10\1\2\1\7\2\2\1\11\2\2\1\7\1\4\2\2\1\11\146\2\1\3\12\2\1"+
    "\7\1\5\2\2\1\12\1\2\1\7\5\2\1\4\114\2\1\7\25\2\1\3\56\2\1\6\1\2\1\4\1\13\2"+
    "\2\1\7\3\2\1\4\5\2\1\7\1\2\1\7\5\2\1\7\1\2\1\5\1\4\6\2\1\3\15\2\1\7\67\2\1"+
    "\3\3\2\1\7\61\2\1\14\105\2\1\7\32\2");

  /* The ZZ_CMAP_A table has 832 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\13\2\0\1\36\4\0\2\5\1\10\1\0\1\6\1\0\1\42"+
    "\1\7\1\53\1\50\1\23\1\24\1\25\1\41\1\51\1\41\1\47\1\41\1\11\1\4\1\0\1\11\36"+
    "\0\1\12\2\0\1\52\1\0\1\27\1\17\1\22\1\16\1\21\1\35\1\46\1\44\1\15\1\55\1\0"+
    "\1\34\1\26\1\33\1\32\1\54\1\0\1\40\1\37\1\30\1\14\1\20\1\45\1\31\1\43\146"+
    "\0\12\41\106\0\12\41\6\0\12\41\134\0\12\41\40\0\12\41\54\0\12\41\60\0\12\41"+
    "\6\0\12\41\66\0\12\41\26\0\12\41\74\0\12\41\16\0\62\41");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\7\1\1\7\14\1\1\10\1\5\1\10\1\1\7\10"+
    "\1\7\14\10\1\11\4\0\1\12\10\0\3\7\17\0"+
    "\1\13\5\0\1\11\4\10\1\12\7\10\3\7\17\10"+
    "\1\13\4\10\6\0\1\14\17\0\1\12\7\0\1\13"+
    "\10\0\1\13\3\0\1\11\1\10\1\0\5\10\1\14"+
    "\17\10\1\12\7\10\1\13\10\10\1\13\3\10\1\11"+
    "\12\0\1\14\21\0\1\11\12\10\1\14\20\10\14\0"+
    "\1\13\12\0\14\10\1\13\12\10\25\0\25\10\15\0"+
    "\15\10\5\0\1\15\1\13\2\0\5\10\1\15\1\13"+
    "\2\10\7\0\7\10\5\0\5\10\5\0\5\10\5\0"+
    "\5\10\5\0\5\10\4\0\4\10\3\0\3\10\2\0"+
    "\2\10\2\0\2\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[481];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\212\0\212\0\212"+
    "\0\346\0\212\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa"+
    "\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a"+
    "\0\u0398\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04ac"+
    "\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c"+
    "\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c"+
    "\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc"+
    "\0\u092a\0\u0958\0\u0986\0\u09b4\0\u0284\0\u09e2\0\u0a10\0\u0a3e"+
    "\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\212\0\u0b24\0\u0b52\0\u0b80"+
    "\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0"+
    "\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60"+
    "\0\u0e8e\0\u0ebc\0\u0eea\0\u0508\0\u0f18\0\u0f46\0\u0f74\0\u0fa2"+
    "\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112"+
    "\0\u1140\0\u04ac\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254"+
    "\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4"+
    "\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534"+
    "\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\212\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6"+
    "\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\212\0\u1928"+
    "\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\212\0\u1a6a"+
    "\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda"+
    "\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a"+
    "\0\u1d78\0\u1da6\0\u1dd4\0\u04ac\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c"+
    "\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc"+
    "\0\u202a\0\u2058\0\u2086\0\u04ac\0\u20b4\0\u20e2\0\u2110\0\u213e"+
    "\0\u216c\0\u219a\0\u21c8\0\u04ac\0\u21f6\0\u2224\0\u2252\0\u2280"+
    "\0\u22ae\0\u22dc\0\u230a\0\u2338\0\u2366\0\u2394\0\u23c2\0\u23f0"+
    "\0\u08fc\0\u241e\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532"+
    "\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u03c6\0\u2674"+
    "\0\u26a2\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6\0\u27e4"+
    "\0\u2812\0\u2840\0\u286e\0\u289c\0\u28ca\0\u0f46\0\u28f8\0\u2926"+
    "\0\u2954\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96"+
    "\0\u2ac4\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa\0\u2bd8\0\u2c06"+
    "\0\u2c34\0\u2c62\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48\0\u2d76"+
    "\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8\0\u2ee6"+
    "\0\u2f14\0\u2f42\0\u2f70\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028\0\u3056"+
    "\0\u3084\0\u30b2\0\u30e0\0\u310e\0\u313c\0\u316a\0\u3198\0\u31c6"+
    "\0\u31f4\0\u3222\0\u3250\0\u327e\0\u32ac\0\u32da\0\u3308\0\u3336"+
    "\0\u3364\0\u3392\0\u33c0\0\u33ee\0\u341c\0\u344a\0\u3478\0\u34a6"+
    "\0\u34d4\0\u3502\0\u3530\0\u355e\0\u358c\0\u35ba\0\u35e8\0\u3616"+
    "\0\u3644\0\u3672\0\u36a0\0\u36ce\0\u36fc\0\u372a\0\u3758\0\u3786"+
    "\0\u37b4\0\u37e2\0\u3810\0\u383e\0\u386c\0\u389a\0\u38c8\0\u38f6"+
    "\0\u3924\0\u3952\0\u3980\0\u39ae\0\u39dc\0\u3a0a\0\u3a38\0\u3a66"+
    "\0\u3a94\0\u3ac2\0\u3af0\0\u3b1e\0\u3b4c\0\u3b7a\0\u3ba8\0\u3bd6"+
    "\0\u3c04\0\u3c32\0\u3c60\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18\0\u3d46"+
    "\0\u3d74\0\u3da2\0\u3dd0\0\u3dfe\0\u3e2c\0\u3e5a\0\u3e88\0\u3eb6"+
    "\0\u3ee4\0\u3f12\0\u3f40\0\u3f6e\0\u3f9c\0\u3fca\0\u3ff8\0\u4026"+
    "\0\u4054\0\u4082\0\u40b0\0\u40de\0\u410c\0\u413a\0\u4168\0\u4196"+
    "\0\u41c4\0\u41f2\0\u4220\0\u424e\0\u427c\0\u42aa\0\u42d8\0\u4306"+
    "\0\212\0\u4334\0\u4362\0\u4390\0\u43be\0\u43ec\0\u441a\0\u4448"+
    "\0\u4476\0\u04ac\0\u44a4\0\u44d2\0\u4500\0\u452e\0\u455c\0\u458a"+
    "\0\u45b8\0\u45e6\0\u4614\0\u4642\0\u4670\0\u469e\0\u46cc\0\u46fa"+
    "\0\u4728\0\u4756\0\u4784\0\u47b2\0\u47e0\0\u480e\0\u483c\0\u486a"+
    "\0\u4898\0\u48c6\0\u48f4\0\u4922\0\u4950\0\u497e\0\u49ac\0\u49da"+
    "\0\u4a08\0\u4a36\0\u4a64\0\u4a92\0\u4ac0\0\u4aee\0\u4b1c\0\u4b4a"+
    "\0\u4b78\0\u4ba6\0\u4bd4\0\u4c02\0\u4c30\0\u4c5e\0\u4c8c\0\u4cba"+
    "\0\u4ce8\0\u4d16\0\u4d44\0\u4d72\0\u4da0\0\u4dce\0\u4dfc\0\u4e2a"+
    "\0\u4e58\0\u4e86\0\u4eb4\0\u4ee2\0\u4f10\0\u4f3e\0\u4f6c\0\u4f9a"+
    "\0\u4fc8\0\u4ff6\0\u5024\0\u5052\0\u5080\0\u50ae\0\u50dc\0\u510a"+
    "\0\u5138\0\u5166\0\u5194\0\u51c2\0\u51f0\0\u521e\0\u524c\0\u527a"+
    "\0\u52a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[481];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\4\1\12\1\4\1\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\3\22\1\23\1\4\1\24\1\25"+
    "\1\26\1\4\1\27\1\30\1\31\1\32\1\33\1\22"+
    "\1\34\2\4\1\35\1\4\3\22\1\4\1\22\1\36"+
    "\2\4\1\5\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\3\4\1\5\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\3\22\1\23\1\4\1\24\1\25\1\26\1\4"+
    "\1\27\1\30\1\31\1\32\1\33\1\22\1\34\2\4"+
    "\1\35\1\4\3\22\1\4\1\22\1\36\1\4\1\37"+
    "\1\5\1\37\1\5\1\6\1\7\1\40\1\41\1\37"+
    "\1\4\1\42\1\5\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\3\52\1\53\1\37\1\54\1\55\1\56"+
    "\1\37\1\57\1\60\1\61\1\62\1\63\1\52\1\64"+
    "\2\37\1\65\1\37\3\52\1\37\1\52\1\66\1\37"+
    "\57\0\1\5\1\0\1\5\7\0\1\5\51\0\1\67"+
    "\1\70\62\0\1\71\2\0\1\72\12\0\1\73\42\0"+
    "\1\72\12\0\1\74\42\0\1\72\5\0\1\75\3\0"+
    "\1\76\40\0\1\77\2\0\1\72\11\0\1\100\44\0"+
    "\1\101\10\0\1\102\52\0\1\103\60\0\1\104\37\0"+
    "\1\105\6\0\3\22\7\0\1\106\3\0\1\22\1\107"+
    "\4\0\3\22\1\0\1\22\31\0\1\110\66\0\1\111"+
    "\52\0\1\112\34\0\1\113\20\0\1\114\2\0\1\115"+
    "\32\0\1\116\11\0\1\117\2\0\1\120\57\0\1\121"+
    "\41\0\1\122\56\0\1\123\55\0\1\124\2\0\1\125"+
    "\21\0\1\126\1\127\1\130\30\0\3\107\13\0\1\107"+
    "\5\0\3\107\1\0\1\107\42\0\1\131\32\0\1\132"+
    "\14\0\1\133\23\0\1\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\43\37\1\0\1\37\3\0\1\37"+
    "\1\135\1\136\1\0\1\134\1\0\42\37\13\0\1\37"+
    "\42\0\1\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\1\37\1\137\2\37\1\140\12\37\1\141\23\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\4\37"+
    "\1\140\12\37\1\142\23\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\4\37\1\140\5\37\1\53\3\37"+
    "\1\143\24\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\1\37\1\144\2\37\1\140\11\37\1\145\24\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\5\37"+
    "\1\146\10\37\1\147\24\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\13\37\1\150\27\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\16\37\1\151\24\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\1\152"+
    "\6\37\3\52\7\37\1\153\3\37\1\52\1\154\4\37"+
    "\3\52\1\37\1\52\3\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\13\37\1\155\27\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\24\37\1\156\16\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\21\37"+
    "\1\157\21\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\1\160\20\37\1\161\2\37\1\162\16\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\1\37\1\163"+
    "\11\37\1\164\2\37\1\165\24\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\20\37\1\166\22\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\4\37\1\167"+
    "\36\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\5\37\1\170\35\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\5\37\1\171\2\37\1\172\21\37\1\173"+
    "\1\174\1\175\6\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\7\37\3\154\13\37\1\154\5\37\3\154"+
    "\1\37\1\154\3\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\24\37\1\176\16\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\1\37\1\177\14\37\1\200"+
    "\23\37\1\67\2\0\53\67\10\70\1\201\45\70\33\0"+
    "\1\202\43\0\1\203\51\0\1\204\56\0\1\205\1\0"+
    "\1\206\7\0\1\207\41\0\1\210\74\0\1\211\54\0"+
    "\1\212\45\0\1\213\15\0\1\214\32\0\1\215\16\0"+
    "\1\216\61\0\1\217\43\0\1\220\4\0\1\221\4\0"+
    "\1\222\3\0\1\223\25\0\1\105\55\0\1\105\6\0"+
    "\3\107\7\0\1\106\3\0\1\107\5\0\3\107\1\0"+
    "\1\107\32\0\1\224\42\0\1\225\57\0\1\226\66\0"+
    "\1\227\62\0\1\230\35\0\1\231\73\0\1\232\65\0"+
    "\1\233\34\0\1\234\62\0\1\113\2\0\1\235\44\0"+
    "\1\236\64\0\1\237\54\0\1\240\7\0\1\241\41\0"+
    "\1\242\51\0\1\243\4\0\1\125\22\0\1\127\1\244"+
    "\21\0\1\245\1\237\34\0\1\246\53\0\1\247\1\250"+
    "\21\0\1\251\71\0\1\252\41\0\1\253\40\0\1\135"+
    "\1\0\1\37\3\67\3\135\1\67\1\254\1\67\42\135"+
    "\1\136\1\70\1\136\3\70\2\136\1\255\1\70\1\256"+
    "\1\70\42\136\1\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\17\37\1\257\23\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\5\37\1\260\35\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\1\37\1\261"+
    "\41\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\2\37\1\262\1\37\1\263\7\37\1\264\26\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\1\265\42\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\17\37"+
    "\1\266\23\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\16\37\1\267\24\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\6\37\1\270\15\37\1\271\16\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\1\37"+
    "\1\272\16\37\1\273\22\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\24\37\1\274\16\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\12\37\1\275\4\37"+
    "\1\276\4\37\1\277\3\37\1\300\12\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\1\152\42\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\1\152\6\37"+
    "\3\154\7\37\1\153\3\37\1\154\5\37\3\154\1\37"+
    "\1\154\3\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\14\37\1\301\26\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\1\37\1\302\41\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\3\37\1\303\37\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\14\37"+
    "\1\304\26\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\21\37\1\305\21\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\1\37\1\306\41\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\17\37\1\307\23\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\27\37"+
    "\1\310\13\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\6\37\1\311\34\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\13\37\1\160\2\37\1\312\24\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\5\37"+
    "\1\313\35\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\14\37\1\314\26\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\13\37\1\315\7\37\1\316\17\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\7\37"+
    "\1\317\33\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\3\37\1\320\4\37\1\172\22\37\1\174\1\321"+
    "\6\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\1\322\1\314\34\37\1\323\4\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\34\37\1\324\1\325\5\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\1\37"+
    "\1\326\41\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\15\37\1\327\25\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\1\37\1\330\40\37\7\70\1\331"+
    "\1\201\45\70\30\0\1\207\47\0\1\213\70\0\1\332"+
    "\41\0\1\333\63\0\1\334\45\0\1\335\54\0\1\336"+
    "\73\0\1\207\44\0\3\207\60\0\1\337\43\0\1\207"+
    "\66\0\1\340\62\0\1\341\75\0\1\342\40\0\1\113"+
    "\37\0\1\227\55\0\1\343\57\0\3\344\57\0\1\345"+
    "\100\0\1\346\42\0\1\347\64\0\1\350\30\0\1\351"+
    "\66\0\1\352\52\0\1\353\55\0\1\202\66\0\1\354"+
    "\33\0\1\355\67\0\1\356\41\0\1\245\1\237\17\0"+
    "\1\237\47\0\1\357\20\0\1\360\56\0\1\250\21\0"+
    "\1\237\77\0\1\361\53\0\1\362\34\0\1\245\1\237"+
    "\17\0\1\237\14\0\1\246\33\0\1\363\46\0\1\364"+
    "\67\0\1\365\22\0\1\67\2\0\10\67\1\135\42\67"+
    "\1\136\1\70\1\136\3\70\1\136\1\366\1\255\1\70"+
    "\1\256\1\70\42\136\10\70\1\201\2\70\1\136\42\70"+
    "\1\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\14\37\1\264\26\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\6\37\1\270\34\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\21\37\1\367\21\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\5\37\1\370"+
    "\35\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\13\37\1\371\27\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\3\37\1\372\37\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\2\37\1\373\40\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\20\37\1\264"+
    "\22\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\7\37\3\264\31\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\14\37\1\374\26\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\2\37\1\264\40\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\13\37\1\375"+
    "\27\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\20\37\1\376\22\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\40\37\1\377\2\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\23\37\1\160\17\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\5\37\1\304"+
    "\35\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\5\37\1\u0100\35\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\7\37\3\u0101\31\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\13\37\1\u0102\27\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\36\37\1\u0103"+
    "\4\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\23\37\1\62\17\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\32\37\1\u0104\10\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\5\37\1\u0105\35\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\16\37\1\u0106"+
    "\24\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\13\37\1\u0107\27\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\13\37\1\257\27\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\24\37\1\u0108\16\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\2\37\1\u0109"+
    "\40\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\14\37\1\u010a\26\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\1\322\1\314\17\37\1\314\21\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\13\37\1\u010b"+
    "\20\37\1\u010c\6\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\35\37\1\325\5\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\1\37\1\314\41\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\23\37\1\u010d"+
    "\17\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\21\37\1\u010e\21\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\1\322\1\314\17\37\1\314\14\37\1\323"+
    "\4\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\14\37\1\u010f\26\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\5\37\1\u0110\35\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\17\37\1\u0111\22\37\32\0"+
    "\1\u0112\54\0\1\237\64\0\1\u0113\51\0\1\u0114\36\0"+
    "\1\u0115\55\0\1\u0116\70\0\1\u0117\70\0\1\u0118\44\0"+
    "\1\u0119\63\0\1\u011a\46\0\1\213\57\0\1\u011b\41\0"+
    "\1\u011c\53\0\1\u011d\77\0\1\u011e\12\0\1\u011f\17\0"+
    "\1\113\71\0\1\u0120\64\0\1\u0121\50\0\1\u0122\63\0"+
    "\1\u0123\41\0\1\125\22\0\1\127\1\244\60\0\1\u0124"+
    "\35\0\1\u0125\74\0\1\u0126\24\0\1\355\70\0\1\u0127"+
    "\51\0\1\u0128\25\0\1\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\16\37\1\u0129\24\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\15\37\1\314\25\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\24\37"+
    "\1\u012a\16\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\20\37\1\u012b\22\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\1\37\1\u012c\41\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\1\37\1\u012d\41\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\14\37"+
    "\1\u012e\26\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\27\37\1\u012f\13\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\16\37\1\u0130\24\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\24\37\1\u0131\16\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\15\37"+
    "\1\270\25\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\17\37\1\u0132\23\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\3\37\1\u0133\37\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\1\37\1\u0134\41\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\23\37"+
    "\1\u0135\12\37\1\u0136\4\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\1\160\42\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\14\37\1\u0137\26\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\23\37\1\u0138"+
    "\17\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\16\37\1\u0139\24\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\24\37\1\u013a\16\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\10\37\1\172\22\37\1\174"+
    "\1\321\6\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\37\37\1\u013b\3\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\17\37\1\u013c\23\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\36\37\1\u013d\4\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\5\37"+
    "\1\u0109\35\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\20\37\1\u013e\22\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\14\37\1\u013f\25\37\40\0\1\u0140"+
    "\32\0\1\u0141\61\0\1\207\67\0\1\u0142\44\0\1\u0143"+
    "\50\0\1\u0144\112\0\1\u0145\36\0\1\u0146\43\0\1\u0147"+
    "\102\0\1\u0148\23\0\1\u0149\74\0\1\u014a\74\0\1\u014b"+
    "\42\0\1\u014c\33\0\1\u014d\55\0\1\u014e\73\0\1\u014f"+
    "\37\0\1\u0150\112\0\1\u0151\35\0\1\u0152\71\0\1\u0153"+
    "\61\0\1\u0154\42\0\1\237\16\0\1\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\24\37\1\u0155\16\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\1\37"+
    "\1\u0156\41\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\5\37\1\264\35\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\17\37\1\u0157\23\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\6\37\1\u0158\34\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\1\37"+
    "\1\u0159\41\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\36\37\1\u015a\4\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\17\37\1\u015b\23\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\5\37\1\u015c\35\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\32\37"+
    "\1\u015d\10\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\1\u015e\42\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\17\37\1\u015f\23\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\36\37\1\u0160\4\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\23\37\1\u0161"+
    "\17\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\1\37\1\u0162\41\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\1\37\1\u0163\41\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\17\37\1\u0164\23\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\1\37\1\u0165"+
    "\41\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\36\37\1\u0166\4\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\16\37\1\u0167\24\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\32\37\1\u0168\10\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\36\37\1\u0169"+
    "\4\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\23\37\1\314\16\37\26\0\1\227\56\0\1\u0147\74\0"+
    "\1\237\30\0\1\u0128\70\0\1\222\56\0\1\u016a\41\0"+
    "\1\u016b\67\0\1\113\56\0\1\232\56\0\1\u016c\72\0"+
    "\1\u016d\32\0\1\u016e\56\0\1\u016f\57\0\1\u0170\55\0"+
    "\1\u0171\57\0\1\u0172\43\0\1\113\62\0\1\u0173\66\0"+
    "\1\u0174\65\0\1\u0175\27\0\1\u0176\33\0\1\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\12\37\1\304"+
    "\30\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\13\37\1\u015c\27\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\32\37\1\314\10\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\5\37\1\u013f\35\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\20\37\1\277"+
    "\22\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\21\37\1\u0177\21\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\5\37\1\u0178\35\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\17\37\1\160\23\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\20\37\1\307"+
    "\22\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\21\37\1\u0179\21\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\36\37\1\u017a\4\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\13\37\1\u017b\27\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\14\37\1\u017c"+
    "\26\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\16\37\1\u017d\24\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\16\37\1\u017e\24\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\20\37\1\u017f\22\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\6\37\1\160"+
    "\34\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\13\37\1\u0180\27\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\24\37\1\u0181\16\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\34\37\1\u0182\6\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\6\37\1\u0183"+
    "\33\37\40\0\1\u0184\50\0\1\123\57\0\1\u0185\34\0"+
    "\1\u0186\57\0\1\u0187\77\0\1\u0188\50\0\1\237\55\0"+
    "\1\u0189\65\0\1\227\35\0\1\u018a\60\0\1\237\77\0"+
    "\1\u018b\26\0\1\u018c\34\0\1\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\24\37\1\u018d\16\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\17\37\1\170"+
    "\23\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\21\37\1\u018e\21\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\1\u018f\42\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\2\37\1\u0190\40\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\24\37\1\u0191\16\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\17\37"+
    "\1\314\23\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\17\37\1\u0192\23\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\27\37\1\304\13\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\7\37\1\u0193\33\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\12\37"+
    "\1\314\30\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\34\37\1\u0194\6\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\5\37\1\u0195\34\37\27\0\1\u0196"+
    "\47\0\1\u0197\110\0\1\u0198\56\0\1\u0199\15\0\1\u019a"+
    "\54\0\1\245\76\0\1\u019b\53\0\1\u019c\22\0\1\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\13\37"+
    "\1\u019d\27\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\5\37\1\u019e\35\37\1\0\1\37\3\0\3\37"+
    "\1\0\1\134\1\0\40\37\1\u019f\2\37\1\0\1\37"+
    "\3\0\3\37\1\0\1\134\1\0\41\37\1\u01a0\1\37"+
    "\1\0\1\37\3\0\3\37\1\0\1\134\1\0\1\37"+
    "\1\u01a1\41\37\1\0\1\37\3\0\3\37\1\0\1\134"+
    "\1\0\1\322\42\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\21\37\1\u01a2\21\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\17\37\1\u01a3\22\37\46\0"+
    "\1\u01a4\47\0\1\237\71\0\1\u01a5\30\0\1\u01a6\102\0"+
    "\1\237\53\0\1\u01a7\33\0\1\u01a8\25\0\1\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\32\37\1\u01a9"+
    "\10\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\24\37\1\314\16\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\40\37\1\u01aa\2\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\13\37\1\u01ab\27\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\40\37\1\314"+
    "\2\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\36\37\1\u01ac\4\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\14\37\1\u01ad\25\37\26\0\1\u01ae\50\0"+
    "\1\u01af\56\0\1\u01b0\52\0\1\u01b1\57\0\1\u01b2\34\0"+
    "\1\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\12\37\1\u01b3\30\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\5\37\1\u01b4\35\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\6\37\1\u01b5\34\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\3\37\1\u01b6"+
    "\37\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\5\37\1\u01b7\34\37\21\0\1\u01b8\74\0\1\u01b9\36\0"+
    "\1\u01ba\104\0\1\u01bb\45\0\1\u01bc\15\0\1\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\5\37\1\u01bd"+
    "\35\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\24\37\1\u01be\16\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\5\37\1\u01bf\35\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\34\37\1\u01c0\6\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\24\37\1\u01c1"+
    "\15\37\33\0\1\u01c2\74\0\1\u01c3\36\0\1\u01c4\75\0"+
    "\1\u01c5\54\0\1\u01c6\3\0\1\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\17\37\1\u01c7\23\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\36\37\1\u01c8"+
    "\4\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\17\37\1\u01c9\23\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\37\37\1\u01ca\3\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\36\37\1\u01cb\3\37\30\0"+
    "\1\u01cc\61\0\1\u01cd\43\0\1\u01ce\70\0\1\237\35\0"+
    "\1\u01cf\40\0\1\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\14\37\1\u01d0\26\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\20\37\1\u01d1\22\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\6\37\1\u01d2"+
    "\34\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\21\37\1\314\21\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\1\37\1\u01d3\40\37\52\0\1\u01d4\24\0"+
    "\1\u01d5\77\0\1\237\45\0\1\u01d6\22\0\1\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\36\37\1\u01d7"+
    "\4\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\5\37\1\u01d8\35\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\27\37\1\314\13\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\17\37\1\u01d9\22\37\30\0"+
    "\1\u01da\62\0\1\123\50\0\1\u01db\25\0\1\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\14\37\1\u01dc"+
    "\26\37\1\0\1\37\3\0\3\37\1\0\1\134\1\0"+
    "\21\37\1\170\21\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\14\37\1\u01dd\25\37\21\0\1\u01de\55\0"+
    "\1\u01df\34\0\1\37\1\0\1\37\3\0\3\37\1\0"+
    "\1\134\1\0\5\37\1\u01e0\35\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\5\37\1\u01e1\34\37\37\0"+
    "\1\365\64\0\1\u0185\7\0\1\37\1\0\1\37\3\0"+
    "\3\37\1\0\1\134\1\0\23\37\1\u0111\17\37\1\0"+
    "\1\37\3\0\3\37\1\0\1\134\1\0\32\37\1\u018e"+
    "\7\37";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21206];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\3\11\1\1\1\11\55\1\4\0"+
    "\1\1\10\0\1\11\2\1\17\0\1\1\5\0\44\1"+
    "\6\0\1\11\17\0\1\11\7\0\1\11\10\0\1\1"+
    "\3\0\2\1\1\0\53\1\12\0\1\1\21\0\34\1"+
    "\14\0\1\1\12\0\27\1\25\0\25\1\15\0\15\1"+
    "\5\0\1\11\1\1\2\0\11\1\7\0\7\1\5\0"+
    "\5\1\5\0\5\1\5\0\5\1\5\0\5\1\4\0"+
    "\4\1\3\0\3\1\2\0\2\1\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[481];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GLSLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 14: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 15: break;
          case 3: 
            { return GLSLTypes.SEMICOLON;
            } 
            // fall through
          case 16: break;
          case 4: 
            { return GLSLTypes.PARENTHASIS;
            } 
            // fall through
          case 17: break;
          case 5: 
            { return GLSLTypes.COMMA;
            } 
            // fall through
          case 18: break;
          case 6: 
            { yybegin(WAITING_VALUE); return GLSLTypes.SEPARATOR;
            } 
            // fall through
          case 19: break;
          case 7: 
            { return GLSLTypes.NUMBER;
            } 
            // fall through
          case 20: break;
          case 8: 
            { yybegin(YYINITIAL); return GLSLTypes.KEY;
            } 
            // fall through
          case 21: break;
          case 9: 
            { return GLSLTypes.COMMENT;
            } 
            // fall through
          case 22: break;
          case 10: 
            { yybegin(YYINITIAL); return GLSLTypes.KEYWORD;
            } 
            // fall through
          case 23: break;
          case 11: 
            { yybegin(YYINITIAL); return GLSLTypes.LAYOUT_QUAL;
            } 
            // fall through
          case 24: break;
          case 12: 
            { yybegin(WAITING_NAME); return GLSLTypes.TYPE;
            } 
            // fall through
          case 25: break;
          case 13: 
            { return GLSLTypes.VERSION;
            } 
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
